name: 'Copilot Setup Steps'

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

env:
  dprint-version: '0.50.1' # selfup {"extract":"\\d[^']+","replacer":["bash","-c","dprint --version | cut -d ' ' -f 2"]}

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-24.04

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          lfs: true

      # Copilot struggles to use Nix correctly, despite significant installation time.
      # Even after installing dprint, it still encounters network issues downloading plugins, so toolset is configured here.
      - name: Install dprint
        run: |
          # Don't use quotation for dprint-version, it will be broken for empty(latest) pattern.
          curl -fsSL https://dprint.dev/install.sh | sh -s ${{ env.dprint-version }} > /dev/null 2>&1
          echo "/home/runner/.dprint/bin" >> "$GITHUB_PATH"
      - uses: denoland/setup-deno@v2
        with:
          deno-version: '2.2.12' # selfup {"extract":"\\d[^']+","replacer":["bash","-c","deno --version | head -n 1 | cut -d ' ' -f 2"]}
